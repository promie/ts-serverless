service: auction-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource:
        - ${self:custom.AuctionsTable.arn}
        - !Join [
            '/',
            ['${self:custom.AuctionsTable.arn}', 'index', 'statusAndEndDate'],
          ]
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource: ${self:custom.MailQueue.arn}
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: arn:aws:s3:::${self:custom.AuctionsBucket.name}/*

resources:
  Resources:
    AuctionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AuctionsTable-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: endingAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: statusAndEndDate
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: endingAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    AuctionsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.AuctionsBucket.name}
        LifecycleEventConfiguration:
          Rules:
            - Id: ExpirePictures
              Status: Enabled
              ExpirationInDays: 1
    AuctionsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AuctionsBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: arn:aws:s3:::${self:custom.AuctionsBucket.name}/*

functions:
  createAuction:
    handler: handler.createAuctionHandler
    events:
      - http:
          method: POST
          path: /auction
          authorizer: ${self:custom.authorizerArn}
  getAuctions:
    handler: handler.getAuctionsHandler
    events:
      - http:
          method: GET
          path: /auctions
          authorizer: ${self:custom.authorizerArn}
  getAuctionsById:
    handler: handler.getAuctionsByIdHandler
    events:
      - http:
          method: GET
          path: /auctions/{id}
          authorizer: ${self:custom.authorizerArn}
  placeBid:
    handler: handler.placeBidHandler
    events:
      - http:
          method: PATCH
          path: /auctions/{id}/bid
          authorizer: ${self:custom.authorizerArn}
  uploadAuctionPicture:
    handler: handler.uploadAuctionPictureHandler
    events:
      - http:
          method: PATCH
          path: /auctions/{id}/picture
          authorizer: ${self:custom.authorizerArn}
  processAuctions:
    handler: handler.processAuctionsHandler
    events:
      - schedule: rate(1 minute)

plugins:
  - serverless-esbuild

custom:
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  authorizerArn: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:auth-service-${self:provider.stage}-auth
  MailQueue:
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket:
    name: auctions-bucket-py1986-${self:provider.stage}
